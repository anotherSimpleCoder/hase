/*
 * This file is generated by jOOQ.
 */
package de.hase.hasev2.database.tables;


import de.hase.hasev2.database.DefaultSchema;
import de.hase.hasev2.database.Keys;
import de.hase.hasev2.database.tables.Appointments.AppointmentsPath;
import de.hase.hasev2.database.tables.Users.UsersPath;
import de.hase.hasev2.database.tables.records.ParticipatesRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Participates extends TableImpl<ParticipatesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>participates</code>
     */
    public static final Participates PARTICIPATES = new Participates();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ParticipatesRecord> getRecordType() {
        return ParticipatesRecord.class;
    }

    /**
     * The column <code>participates.appointmentId</code>.
     */
    public final TableField<ParticipatesRecord, Integer> APPOINTMENTID = createField(DSL.name("appointmentId"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>participates.matrikelNr</code>.
     */
    public final TableField<ParticipatesRecord, Integer> MATRIKELNR = createField(DSL.name("matrikelNr"), SQLDataType.INTEGER.nullable(false), this, "");

    private Participates(Name alias, Table<ParticipatesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Participates(Name alias, Table<ParticipatesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>participates</code> table reference
     */
    public Participates(String alias) {
        this(DSL.name(alias), PARTICIPATES);
    }

    /**
     * Create an aliased <code>participates</code> table reference
     */
    public Participates(Name alias) {
        this(alias, PARTICIPATES);
    }

    /**
     * Create a <code>participates</code> table reference
     */
    public Participates() {
        this(DSL.name("participates"), null);
    }

    public <O extends Record> Participates(Table<O> path, ForeignKey<O, ParticipatesRecord> childPath, InverseForeignKey<O, ParticipatesRecord> parentPath) {
        super(path, childPath, parentPath, PARTICIPATES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ParticipatesPath extends Participates implements Path<ParticipatesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ParticipatesPath(Table<O> path, ForeignKey<O, ParticipatesRecord> childPath, InverseForeignKey<O, ParticipatesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ParticipatesPath(Name alias, Table<ParticipatesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ParticipatesPath as(String alias) {
            return new ParticipatesPath(DSL.name(alias), this);
        }

        @Override
        public ParticipatesPath as(Name alias) {
            return new ParticipatesPath(alias, this);
        }

        @Override
        public ParticipatesPath as(Table<?> alias) {
            return new ParticipatesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<ParticipatesRecord> getPrimaryKey() {
        return Keys.PARTICIPATES__PK_PARTICIPATES;
    }

    @Override
    public List<ForeignKey<ParticipatesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PARTICIPATES__FK_PARTICIPATES_PK_APPOINTMENTS, Keys.PARTICIPATES__FK_PARTICIPATES_PK_USERS);
    }

    private transient AppointmentsPath _appointments;

    /**
     * Get the implicit join path to the <code>Appointments</code> table.
     */
    public AppointmentsPath appointments() {
        if (_appointments == null)
            _appointments = new AppointmentsPath(this, Keys.PARTICIPATES__FK_PARTICIPATES_PK_APPOINTMENTS, null);

        return _appointments;
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>Users</code> table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.PARTICIPATES__FK_PARTICIPATES_PK_USERS, null);

        return _users;
    }

    @Override
    public Participates as(String alias) {
        return new Participates(DSL.name(alias), this);
    }

    @Override
    public Participates as(Name alias) {
        return new Participates(alias, this);
    }

    @Override
    public Participates as(Table<?> alias) {
        return new Participates(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Participates rename(String name) {
        return new Participates(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Participates rename(Name name) {
        return new Participates(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Participates rename(Table<?> name) {
        return new Participates(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Participates where(Condition condition) {
        return new Participates(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Participates where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Participates where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Participates where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Participates where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Participates where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Participates where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Participates where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Participates whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Participates whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
