/*
 * This file is generated by jOOQ.
 */
package de.hase.hasev2.database.tables;


import de.hase.hasev2.database.DefaultSchema;
import de.hase.hasev2.database.Keys;
import de.hase.hasev2.database.tables.Participates.ParticipatesPath;
import de.hase.hasev2.database.tables.Users.UsersPath;
import de.hase.hasev2.database.tables.records.AppointmentsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Appointments extends TableImpl<AppointmentsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>Appointments</code>
     */
    public static final Appointments APPOINTMENTS = new Appointments();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AppointmentsRecord> getRecordType() {
        return AppointmentsRecord.class;
    }

    /**
     * The column <code>Appointments.appointmentId</code>.
     */
    public final TableField<AppointmentsRecord, Integer> APPOINTMENTID = createField(DSL.name("appointmentId"), SQLDataType.INTEGER.identity(true), this, "");

    /**
     * The column <code>Appointments.name</code>.
     */
    public final TableField<AppointmentsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>Appointments.creator</code>.
     */
    public final TableField<AppointmentsRecord, Integer> CREATOR = createField(DSL.name("creator"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Appointments.date</code>.
     */
    public final TableField<AppointmentsRecord, LocalDateTime> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>Appointments.location</code>.
     */
    public final TableField<AppointmentsRecord, String> LOCATION = createField(DSL.name("location"), SQLDataType.VARCHAR(50), this, "");

    private Appointments(Name alias, Table<AppointmentsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Appointments(Name alias, Table<AppointmentsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>Appointments</code> table reference
     */
    public Appointments(String alias) {
        this(DSL.name(alias), APPOINTMENTS);
    }

    /**
     * Create an aliased <code>Appointments</code> table reference
     */
    public Appointments(Name alias) {
        this(alias, APPOINTMENTS);
    }

    /**
     * Create a <code>Appointments</code> table reference
     */
    public Appointments() {
        this(DSL.name("Appointments"), null);
    }

    public <O extends Record> Appointments(Table<O> path, ForeignKey<O, AppointmentsRecord> childPath, InverseForeignKey<O, AppointmentsRecord> parentPath) {
        super(path, childPath, parentPath, APPOINTMENTS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class AppointmentsPath extends Appointments implements Path<AppointmentsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> AppointmentsPath(Table<O> path, ForeignKey<O, AppointmentsRecord> childPath, InverseForeignKey<O, AppointmentsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private AppointmentsPath(Name alias, Table<AppointmentsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public AppointmentsPath as(String alias) {
            return new AppointmentsPath(DSL.name(alias), this);
        }

        @Override
        public AppointmentsPath as(Name alias) {
            return new AppointmentsPath(alias, this);
        }

        @Override
        public AppointmentsPath as(Table<?> alias) {
            return new AppointmentsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<AppointmentsRecord, Integer> getIdentity() {
        return (Identity<AppointmentsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<AppointmentsRecord> getPrimaryKey() {
        return Keys.APPOINTMENTS__PK_APPOINTMENTS;
    }

    @Override
    public List<ForeignKey<AppointmentsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.APPOINTMENTS__FK_APPOINTMENTS_PK_USERS);
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>Users</code> table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.APPOINTMENTS__FK_APPOINTMENTS_PK_USERS, null);

        return _users;
    }

    private transient ParticipatesPath _participates;

    /**
     * Get the implicit to-many join path to the <code>participates</code> table
     */
    public ParticipatesPath participates() {
        if (_participates == null)
            _participates = new ParticipatesPath(this, null, Keys.PARTICIPATES__FK_PARTICIPATES_PK_APPOINTMENTS.getInverseKey());

        return _participates;
    }

    @Override
    public Appointments as(String alias) {
        return new Appointments(DSL.name(alias), this);
    }

    @Override
    public Appointments as(Name alias) {
        return new Appointments(alias, this);
    }

    @Override
    public Appointments as(Table<?> alias) {
        return new Appointments(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Appointments rename(String name) {
        return new Appointments(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Appointments rename(Name name) {
        return new Appointments(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Appointments rename(Table<?> name) {
        return new Appointments(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Appointments where(Condition condition) {
        return new Appointments(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Appointments where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Appointments where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Appointments where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Appointments where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Appointments where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Appointments where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Appointments where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Appointments whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Appointments whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
